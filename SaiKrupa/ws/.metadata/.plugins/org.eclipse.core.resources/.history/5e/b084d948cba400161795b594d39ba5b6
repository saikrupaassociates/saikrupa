package com.saikrupa.app.ui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.SwingConstants;

import com.alee.extended.date.WebDateField;
import com.alee.extended.panel.GroupPanel;
import com.alee.laf.button.WebButton;
import com.alee.laf.label.WebLabel;
import com.alee.laf.panel.WebPanel;
import com.alee.laf.scroll.WebScrollPane;
import com.alee.laf.table.WebTable;
import com.alee.laf.text.WebTextField;
import com.saikrupa.app.dao.EmployeeDAO;
import com.saikrupa.app.dao.impl.DefaultEmployeeDAO;
import com.saikrupa.app.dto.EmployeeData;
import com.saikrupa.app.dto.EmployeeSalaryData;
import com.saikrupa.app.ui.models.EmployeeRevisionTableModel;
import com.saikrupa.app.util.DateUtil;

public class ManageRevisionDialog extends BaseAppDialog {

	
	private static final long serialVersionUID = 1L;
	private WebTable revisionContentTable;
	private EmployeeData currentEmployee;
	

	public ManageRevisionDialog(SKAMainApp owner) {
		super(owner);
		setSize(new Dimension(600, 800));
	}
	
	public ManageRevisionDialog(UpdateEmployeeDialog updateEmployeeDialog, EmployeeData employee) {
		super(updateEmployeeDialog, true);
		setCurrentEmployee(employee);
		setTitle("Manage Salary Revisions...");
		setSize(new Dimension(600, 800));
		setLocationRelativeTo(updateEmployeeDialog);
		//setResizable(false);
		buildGUI(updateEmployeeDialog, employee);
	}

	private void buildGUI(UpdateEmployeeDialog owner, EmployeeData employee) {
		
		
		WebPanel formPanel = new WebPanel();
		formPanel.setBorder(BorderFactory.createRaisedSoftBevelBorder());
		GridBagLayout layout = new GridBagLayout();
		formPanel.setLayout(layout);
		GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.HORIZONTAL;

		WebLabel l1 = new WebLabel("Employee Code : ", SwingConstants.RIGHT);
		final WebLabel codeLabel = new WebLabel(employee.getCode());
		l1.setFont(applyLabelFont());

		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(0, 0, 10, 0);
		layout.setConstraints(l1, c);
		formPanel.add(l1);

		c.gridx = 1;
		c.gridy = 0;
		c.insets = new Insets(0, 10, 10, 0);
		layout.setConstraints(codeLabel, c);
		formPanel.add(codeLabel);

		WebLabel l2 = new WebLabel("Employee Name : ", SwingConstants.RIGHT);
		final WebLabel contactLabel = new WebLabel(employee.getName());
		l2.setFont(applyLabelFont());
		
		c.gridx = 2;
		c.gridy = 0;
		c.insets = new Insets(0, 80, 10, 0);
		layout.setConstraints(l2, c);
		formPanel.add(l2);

		c.gridx = 3;
		c.gridy = 0;
		c.insets = new Insets(0, 10, 10, 0);
		layout.setConstraints(contactLabel, c);
		formPanel.add(contactLabel);
		
		/**
		 * 
		 */
		WebLabel l3 = new WebLabel("Date of Joining : ", SwingConstants.RIGHT);
		final WebLabel dojLabel = new WebLabel(DateUtil.convertToString("dd-MMM-yyyy", employee.getJoiningDate()));
		l3.setFont(applyLabelFont());

		c.gridx = 0;
		c.gridy = 1;
		c.insets = new Insets(0, 0, 10, 0);
		layout.setConstraints(l3, c);
		formPanel.add(l3);

		c.gridx = 1;
		c.gridy = 1;
		c.insets = new Insets(0, 10, 10, 0);
		layout.setConstraints(dojLabel, c);
		formPanel.add(dojLabel);

		WebLabel l4 = new WebLabel("Revised Salary : ", SwingConstants.RIGHT);
		final WebTextField revisedSalaryText = new WebTextField(15);
		l4.setFont(applyLabelFont());
		
		c.gridx = 2;
		c.gridy = 1;
		c.insets = new Insets(0, 80, 10, 0);
		layout.setConstraints(l4, c);
		formPanel.add(l4);

		c.gridx = 3;
		c.gridy = 1;
		c.insets = new Insets(0, 10, 10, 0);
		layout.setConstraints(revisedSalaryText, c);
		formPanel.add(revisedSalaryText);
		
		/**
		 * Row 3
		 */
		WebLabel l5 = new WebLabel("Effective From : ", SwingConstants.RIGHT);
		final WebDateField effectiveFromText = new WebDateField(new Date());
		l5.setFont(applyLabelFont());

		c.gridx = 0;
		c.gridy = 2;
		c.insets = new Insets(0, 0, 10, 0);
		layout.setConstraints(l5, c);
		formPanel.add(l5);

		c.gridx = 1;
		c.gridy = 2;
		c.insets = new Insets(0, 10, 10, 0);
		layout.setConstraints(effectiveFromText, c);
		formPanel.add(effectiveFromText);

		WebLabel l6 = new WebLabel("Effective Till : ", SwingConstants.RIGHT);
		final WebDateField effectiveTillText = new WebDateField(new Date());
		l6.setFont(applyLabelFont());
		
		c.gridx = 2;
		c.gridy = 2;
		c.insets = new Insets(0, 80, 10, 0);
		layout.setConstraints(l6, c);
		formPanel.add(l6);

		c.gridx = 3;
		c.gridy = 2;
		c.insets = new Insets(0, 10, 10, 0);
		layout.setConstraints(effectiveTillText, c);
		formPanel.add(effectiveTillText);
		
		WebButton addRevisionButton = new WebButton("Add Revision");
		addRevisionButton.setActionCommand("ADD_REVISION");
		
		c.gridx = 4;
		c.gridy = 3;
		c.insets = new Insets(0, 10, 10, 0);
		layout.setConstraints(addRevisionButton, c);
		formPanel.add(addRevisionButton);
			
		//WebPanel tablePanel = buildRevisionContentTablePanel();
		
		EmployeeDAO dao = new DefaultEmployeeDAO();
		List<EmployeeSalaryData> revisions = dao.findRevisionsByEmployee(getCurrentEmployee().getCode());
		revisionContentTable = new WebTable(new EmployeeRevisionTableModel(revisions));
		//contentPanel.add(new WebScrollPane(revisionContentTable), BorderLayout.CENTER);
		//contentPanel.setSize(500, 700);

		revisionContentTable.getTableHeader().setFont(applyLabelFont());
		revisionContentTable.setRowHeight(25);
		revisionContentTable.setFont(applyTableFont());
		
		
		ActionListener l = new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(e.getActionCommand().equalsIgnoreCase("CANCEL")) {
					dispose();
				} else if(e.getActionCommand().equalsIgnoreCase("ADD_REVISION")) {
					EmployeeSalaryData data = new EmployeeSalaryData();
					data.setEmployee(getCurrentEmployee());
					data.setEffectiveFrom(effectiveFromText.getDate());
					data.setEffectiveTill(effectiveTillText.getDate());
					data.setSalary(Double.valueOf(revisedSalaryText.getText()).doubleValue());
					updateRevisionTableModel(data);
				}
			}			
		};
		addRevisionButton.addActionListener(l);
		add(new GroupPanel(formPanel), BorderLayout.NORTH);
		WebPanel maon = new WebPanel(new BorderLayout());
		tablePanel.add(new WebScrollPane(revisionContentTable), BorderLayout.CENTER);
		add(tablePanel, BorderLayout.CENTER);
		//setSize(800, 400);
		pack();
	}
	
	private void updateRevisionTableModel(EmployeeSalaryData data) {
		EmployeeRevisionTableModel model = (EmployeeRevisionTableModel)revisionContentTable.getModel();
		model.getRevisionDataList().add(data);
		model.fireTableDataChanged();
		revalidate();
		
	}
	
	private WebPanel buildRevisionContentTablePanel() {
		WebPanel contentPanel = new WebPanel();
		contentPanel.setBorder(BorderFactory.createRaisedBevelBorder());
		contentPanel.setLayout(new BorderLayout());

		EmployeeDAO dao = new DefaultEmployeeDAO();
		List<EmployeeSalaryData> revisions = dao.findRevisionsByEmployee(getCurrentEmployee().getCode());
		revisionContentTable = new WebTable(new EmployeeRevisionTableModel(revisions));
		contentPanel.add(new WebScrollPane(revisionContentTable), BorderLayout.CENTER);
		contentPanel.setSize(500, 700);

		revisionContentTable.getTableHeader().setFont(applyLabelFont());
		revisionContentTable.setRowHeight(25);
		revisionContentTable.setFont(applyTableFont());
		return contentPanel;		
	}

	public WebTable getRevisionContentTable() {
		return revisionContentTable;
	}

	public void setRevisionContentTable(WebTable revisionContentTable) {
		this.revisionContentTable = revisionContentTable;
	}

	public EmployeeData getCurrentEmployee() {
		return currentEmployee;
	}

	public void setCurrentEmployee(EmployeeData currentEmployee) {
		this.currentEmployee = currentEmployee;
	}

	

}
